---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lsjlkz.
--- DateTime: 2022/7/25 23:38
---


local s = require("Common/String")
local db_define = require("ServerDB/ServerDBDefine")
local p = require("Common/Print")

__G__RoleDataTable = __G__RoleDataTable or {}


local role_table_name = "role_data"

function __G__RoleDataTable.CreateRole(role_name)
    local mysql = require("luasql.mysql").mysql()
    local con = mysql:connect(db_define.RoleDBName, db_define.User, db_define.Password, db_define.Host, db_define.Port)
    local sql = string.format("insert into %s (role_name) values('%s');", db_define.RoleTableName, role_name)
    local cur = con:execute(sql)
    sql = "SELECT LAST_insert_ID();"
    cur = con:execute(sql)
    local row = cur:fetch({}, "a")
    role_id = row["LAST_insert_ID()"]
    con:close()
    return role_id
end

function __G__RoleDataTable.save_all_data(t)
    local mysql = require("luasql.mysql").mysql()
    local con = mysql:connect(db_define.RoleDBName, db_define.User, db_define.Password, db_define.Host, db_define.Port)
    for role_id, role in pairs(t) do
        role_name = role:GetRoleName()
        int_table = role.IntTable
        obj_table = role.ObjTable
        serialize_int = s.Serialize(int_table)
        serialize_obj = s.Serialize(obj_table)
        con:execute(string.format("insert into %s (role_id, role_name, int_table, obj_table) values (%s, '%s', '%s', '%s') on duplicate key update role_id = %s, role_name = '%s', int_table='%s', obj_table='%s';",
                db_define.RoleTableName, role_id, role_name, serialize_int, serialize_obj,
                role_id, role_name, serialize_int, serialize_obj
        ))
    end
    con:close()
    print("save role end...")
end

function __G__RoleDataTable.load_data()
    --TODO
    -- TODO 读取mysql的角色数据，数据库部分肯定要逻辑分离，从Logic的Server拆分，拆分到ServerDB中
    local mysql = require("luasql.mysql").mysql()
    local con = mysql:connect(db_define.RoleDBName, db_define.User, db_define.Password, db_define.Host, db_define.Port)
    local cur = con:execute(string.format("select role_id, role_name, int_table, obj_table from %s;", db_define.RoleTableName))
    local row = cur:fetch({}, "a")
    t = {}
    while row do
        --TODO
        table.insert(t, {row.role_id, row.role_name, row.int_table, row.obj_table})
        row = cur:fetch(row,"a")
    end
    con:close()
    return t
end


return __G__RoleDataTable